@model UsersQueryModel

@{
    var previousPage = Model.CurrentPage - 1;
    var currentPage = Model.CurrentPage;

    if (previousPage < 1)
    {
        previousPage = 1;
    }

    var lastPage = (int)Math.Ceiling((double)Model.TotalUsers / UsersQueryModel.usersPerPage);
}

<nav>
    <ul class="pagination justify-content-center mb-4">
        <li class="page-item @(currentPage <= 1 ? "disabled" : String.Empty)">
            <a class="page-link"
               asp-controller="Users" asp-action="All"
               asp-route-currentPage="@previousPage"
               asp-route-searchTerm="@Model.SearchTerm">Previous</a>
        </li>
        @for (int i = currentPage - 3; i < currentPage; i++)
        {
            if (i > 0)
            {
                <li class="page-item">
                    <a class="page-link"
                       asp-controller="Users" asp-action="All"
                       asp-route-currentPage="@i"
                       asp-route-searchTerm="@Model.SearchTerm">@i</a>
                </li>
            }
        }
        <li class="page-item active">
            <span class="page-link">
                @currentPage
                <span class="sr-only">(current)</span>
            </span>
        </li>
        @for (int i = currentPage + 1; i < currentPage + 4; i++)
        {
            if (i <= lastPage)
            {
                <li class="page-item">
                    <a class="page-link"
                       asp-controller="Users" asp-action="All"
                       asp-route-currentPage="@i"
                       asp-route-searchTerm="@Model.SearchTerm">@i</a>
                </li>
            }
        }
        <li class="page-item @(currentPage >= lastPage ? "disabled" : String.Empty)">
            <a class="page-link"
               asp-controller="Users" asp-action="All"
               asp-route-currentPage="@(currentPage + 1)"
               asp-route-searchTerm="@Model.SearchTerm">Next</a>
        </li>
    </ul>
</nav>